{"functions":[{"key":"add_facts","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Deep merges a hash of facts with the existing facts on a target.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"add_facts(Target $target, Hash $facts)","doc":"Deep merges a hash of facts with the existing facts on a target.\n\n**NOTE:** Not available in apply block","return_types":["Variant[Target, Hash[String, Data]]"],"parameters":[{"name":"target","doc":"A target.","types":["Target"],"signature_key_offset":17,"signature_key_length":7},{"name":"facts","doc":"A hash of fact names to values that may include structured facts.","types":["Hash"],"signature_key_offset":31,"signature_key_length":6}]}]},{"key":"add_to_group","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Adds a target to specified inventory group.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"add_to_group(Boltlib::TargetSpec $targets, String[1] $group)","doc":"Adds a target to specified inventory group.\n\n**NOTE:** Not available in apply block","return_types":["Any"],"parameters":[{"name":"targets","doc":"A pattern or array of patterns identifying a set of targets.","types":["Boltlib::TargetSpec"],"signature_key_offset":33,"signature_key_length":8},{"name":"group","doc":"The name of the group to add targets to.","types":["String[1]"],"signature_key_offset":53,"signature_key_length":6}]}]},{"key":"apply_prep","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Installs the puppet-agent package on targets if needed, then collects facts,\nincluding any custom facts found in Bolt's modulepath. The package is\ninstalled using either the configured plugin or the `task` plugin with the\n`puppet_agent::install` task.\n\nAgent detection will be skipped if the target includes the 'puppet-agent' feature, either as a\nproperty of its transport (PCP) or by explicitly setting it as a feature in Bolt's inventory.\n\nIf Bolt does not detect an agent on the target using the 'puppet_agent::version' task,\nit will install the agent using either the configured plugin or the\ntask plugin.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"apply_prep(Boltlib::TargetSpec $targets)","doc":"Installs the puppet-agent package on targets if needed, then collects facts,\nincluding any custom facts found in Bolt's modulepath. The package is\ninstalled using either the configured plugin or the `task` plugin with the\n`puppet_agent::install` task.\n\nAgent detection will be skipped if the target includes the 'puppet-agent' feature, either as a\nproperty of its transport (PCP) or by explicitly setting it as a feature in Bolt's inventory.\n\nIf Bolt does not detect an agent on the target using the 'puppet_agent::version' task,\nit will install the agent using either the configured plugin or the\ntask plugin.\n\n**NOTE:** Not available in apply block","return_types":["Any"],"parameters":[{"name":"targets","doc":"A pattern or array of patterns identifying a set of targets.","types":["Boltlib::TargetSpec"],"signature_key_offset":31,"signature_key_length":8}]}]},{"key":"catch_errors","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Catches errors in a given block and returns them. This will return the\noutput of the block if no errors are raised. Accepts an optional list of\nerror kinds to catch.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"catch_errors(Optional[Array[String[1]]] $error_types, Callable[0, 0] &$block)","doc":"Catches errors in a given block and returns them. This will return the\noutput of the block if no errors are raised. Accepts an optional list of\nerror kinds to catch.\n\n**NOTE:** Not available in apply block","return_types":["Any"],"parameters":[{"name":"error_types","doc":"An array of error types to catch","types":["Optional[Array[String[1]]]"],"signature_key_offset":40,"signature_key_length":12},{"name":"&block","doc":"The block of steps to catch errors on","types":["Callable[0, 0]"],"signature_key_offset":69,"signature_key_length":7}]}]},{"key":"facts","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Returns the facts hash for a target.","function_version":4,"signatures":[{"key":"facts(Target $target)","doc":"Returns the facts hash for a target.","return_types":["Hash[String, Data]"],"parameters":[{"name":"target","doc":"A target.","types":["Target"],"signature_key_offset":13,"signature_key_length":7}]}]},{"key":"fail_plan","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Raises a Bolt::PlanFailure exception to signal to callers that the plan failed.\n\nPlan authors should call this function when their plan is not successful. The\nerror may then be caught by another plans run_plan function or in bolt itself\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"fail_plan(String[1] $msg, Optional[String[1]] $kind, Optional[Hash[String[1], Any]] $details, Optional[String[1]] $issue_code)","doc":"Fail a plan, generating an exception from the parameters.","return_types":["Any"],"parameters":[{"name":"msg","doc":"An error message.","types":["String[1]"],"signature_key_offset":20,"signature_key_length":4},{"name":"kind","doc":"An easily matchable error kind.","types":["Optional[String[1]]"],"signature_key_offset":46,"signature_key_length":5},{"name":"details","doc":"Machine-parseable details about the error.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":84,"signature_key_length":8},{"name":"issue_code","doc":"Unused.","types":["Optional[String[1]]"],"signature_key_offset":114,"signature_key_length":11}]},{"key":"fail_plan(Error $error)","doc":"Fail a plan, generating an exception from an existing Error object.","return_types":["Any"],"parameters":[{"name":"error","doc":"An error object.","types":["Error"],"signature_key_offset":16,"signature_key_length":6}]}]},{"key":"get_resources","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Query the state of resources on a list of targets using resource definitions in Bolt's modulepath.\nThe results are returned as a list of hashes representing each resource.\n\nRequires the Puppet Agent be installed on the target, which can be accomplished with apply_prep\nor by directly running the puppet_agent::install task. In order to be able to reference types without\nstring quoting (for example `get_resources($target, Package)` instead of `get_resources($target, 'Package')`)\nrun the command `bolt puppetfile generate-types` to generate type references in `$Boldir/.resource_types`.\n\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"get_resources(Boltlib::TargetSpec $targets, Variant[String, Type[Resource], Array[Variant[String, Type[Resource]]]] $resources)","doc":"Query the state of resources on a list of targets using resource definitions in Bolt's modulepath.\nThe results are returned as a list of hashes representing each resource.\n\nRequires the Puppet Agent be installed on the target, which can be accomplished with apply_prep\nor by directly running the puppet_agent::install task. In order to be able to reference types without\nstring quoting (for example `get_resources($target, Package)` instead of `get_resources($target, 'Package')`)\nrun the command `bolt puppetfile generate-types` to generate type references in `$Boldir/.resource_types`.\n\n\n**NOTE:** Not available in apply block","return_types":["Any"],"parameters":[{"name":"targets","doc":"A pattern or array of patterns identifying a set of targets.","types":["Boltlib::TargetSpec"],"signature_key_offset":34,"signature_key_length":8},{"name":"resources","doc":"A resource type or instance, or an array of such.","types":["Variant[String, Type[Resource], Array[Variant[String, Type[Resource]]]]"],"signature_key_offset":116,"signature_key_length":10}]}]},{"key":"get_target","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Get a single target from inventory if it exists, otherwise create a new Target.\n\n**NOTE:** Calling `get_target` inside an `apply` block with a\nversion 2 inventory creates a new Target object.\n`get_target('all')` returns an empty array.\n**NOTE:** Only compatible with inventory v2","function_version":4,"signatures":[{"key":"get_target(Boltlib::TargetSpec $name)","doc":"Get a single target from inventory if it exists, otherwise create a new Target.\n\n**NOTE:** Calling `get_target` inside an `apply` block with a\nversion 2 inventory creates a new Target object.\n`get_target('all')` returns an empty array.\n**NOTE:** Only compatible with inventory v2","return_types":["Target"],"parameters":[{"name":"name","doc":"A Target name.","types":["Boltlib::TargetSpec"],"signature_key_offset":31,"signature_key_length":5}]}]},{"key":"get_targets","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Parses common ways of referring to targets and returns an array of Targets.\n\n**NOTE:** Calling `get_targets` inside an `apply` block with a\nversion 2 inventory creates a new Target object.\n`get_targets('all')` returns an empty array.","function_version":4,"signatures":[{"key":"get_targets(Boltlib::TargetSpec $names)","doc":"Parses common ways of referring to targets and returns an array of Targets.\n\n**NOTE:** Calling `get_targets` inside an `apply` block with a\nversion 2 inventory creates a new Target object.\n`get_targets('all')` returns an empty array.","return_types":["Array[Target]"],"parameters":[{"name":"names","doc":"A pattern or array of patterns identifying a set of targets.","types":["Boltlib::TargetSpec"],"signature_key_offset":32,"signature_key_length":6}]}]},{"key":"puppetdb_fact","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Collects facts based on a list of certnames.\n\n* If a node is not found in PuppetDB, it's included in the returned hash with empty facts hash.\n* Otherwise the node is included in the hash with a value that is a hash of it's facts.","function_version":4,"signatures":[{"key":"puppetdb_fact(Array[String] $certnames)","doc":"Collects facts based on a list of certnames.\n\n* If a node is not found in PuppetDB, it's included in the returned hash with empty facts hash.\n* Otherwise the node is included in the hash with a value that is a hash of it's facts.","return_types":["Hash[String, Data]"],"parameters":[{"name":"certnames","doc":"Array of certnames.","types":["Array[String]"],"signature_key_offset":28,"signature_key_length":10}]}]},{"key":"puppetdb_query","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Makes a query to {https://puppet.com/docs/puppetdb/latest/index.html puppetdb}\nusing Bolt's PuppetDB client.","function_version":4,"signatures":[{"key":"puppetdb_query(Variant[String, Array[Data]] $query)","doc":"Makes a query to {https://puppet.com/docs/puppetdb/latest/index.html puppetdb}\nusing Bolt's PuppetDB client.","return_types":["Array[Data]"],"parameters":[{"name":"query","doc":"A PQL query.\n{https://puppet.com/docs/puppetdb/latest/api/query/tutorial-pql.html Learn more about Puppet's query language, PQL}","types":["Variant[String, Array[Data]]"],"signature_key_offset":44,"signature_key_length":6}]}]},{"key":"resolve_references","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Evaulates all _plugin references in a hash and returns the resolved reference data.","function_version":4,"signatures":[{"key":"resolve_references(Data $references)","doc":"Evaulates all _plugin references in a hash and returns the resolved reference data.","return_types":["Data"],"parameters":[{"name":"references","doc":"A hash of reference data to resolve.","types":["Data"],"signature_key_offset":24,"signature_key_length":11}]}]},{"key":"run_command","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Runs a command on the given set of targets and returns the result from each command execution.\nThis function does nothing if the list of targets is empty.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"run_command(String[1] $command, Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $options)","doc":"Run a command.","return_types":["ResultSet"],"parameters":[{"name":"command","doc":"A command to run on target.","types":["String[1]"],"signature_key_offset":22,"signature_key_length":8},{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":52,"signature_key_length":8},{"name":"options","doc":"Additional options: '_catch_errors', '_run_as'.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":93,"signature_key_length":8}]},{"key":"run_command(String[1] $command, Boltlib::TargetSpec $targets, String $description, Optional[Hash[String[1], Any]] $options)","doc":"Run a command, logging the provided description.","return_types":["ResultSet"],"parameters":[{"name":"command","doc":"A command to run on target.","types":["String[1]"],"signature_key_offset":22,"signature_key_length":8},{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":52,"signature_key_length":8},{"name":"description","doc":"A description to be output when calling this function.","types":["String"],"signature_key_offset":69,"signature_key_length":12},{"name":"options","doc":"Additional options: '_catch_errors', '_run_as'.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":114,"signature_key_length":8}]}]},{"key":"run_plan","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Runs the `plan` referenced by its name. A plan is autoloaded from `$MODULEROOT/plans`.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"run_plan(String $plan_name, Optional[Hash] $args)","doc":"Run a plan","return_types":["Boltlib::PlanResult"],"parameters":[{"name":"plan_name","doc":"The plan to run.","types":["String"],"signature_key_offset":16,"signature_key_length":10},{"name":"args","doc":"Arguments to the plan. Can also include additional options: '_catch_errors', '_run_as'.","types":["Optional[Hash]"],"signature_key_offset":43,"signature_key_length":5}]},{"key":"run_plan(String $plan_name, Boltlib::TargetSpec $targets, Optional[Hash] $args)","doc":"Run a plan, specifying $nodes as a positional argument.","return_types":["Boltlib::PlanResult"],"parameters":[{"name":"plan_name","doc":"The plan to run.","types":["String"],"signature_key_offset":16,"signature_key_length":10},{"name":"args","doc":"Arguments to the plan. Can also include additional options: '_catch_errors', '_run_as'.","types":["Optional[Hash]"],"signature_key_offset":73,"signature_key_length":5},{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":48,"signature_key_length":8}]}]},{"key":"run_script","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Uploads the given script to the given set of targets and returns the result of having each target execute the script.\nThis function does nothing if the list of targets is empty.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"run_script(String[1] $script, Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $options)","doc":"Run a script.","return_types":["ResultSet"],"parameters":[{"name":"script","doc":"Path to a script to run on target. May be an absolute path or a modulename/filename selector for a\nfile in $MODULEROOT/files.","types":["String[1]"],"signature_key_offset":21,"signature_key_length":7},{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":50,"signature_key_length":8},{"name":"options","doc":"Specify an array of arguments to the 'arguments' key to be passed to the script.\nAdditional options: '_catch_errors', '_run_as'.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":91,"signature_key_length":8}]},{"key":"run_script(String[1] $script, Boltlib::TargetSpec $targets, String $description, Optional[Hash[String[1], Any]] $options)","doc":"Run a script, logging the provided description.","return_types":["ResultSet"],"parameters":[{"name":"script","doc":"Path to a script to run on target. May be an absolute path or a modulename/filename selector for a\nfile in $MODULEROOT/files.","types":["String[1]"],"signature_key_offset":21,"signature_key_length":7},{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":50,"signature_key_length":8},{"name":"description","doc":"A description to be output when calling this function.","types":["String"],"signature_key_offset":67,"signature_key_length":12},{"name":"options","doc":"Specify an array of arguments to the 'arguments' key to be passed to the script.\nAdditional options: '_catch_errors', '_run_as'.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":112,"signature_key_length":8}]}]},{"key":"run_task","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Runs a given instance of a `Task` on the given set of targets and returns the result from each.\nThis function does nothing if the list of targets is empty.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"run_task(String[1] $task_name, Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $args)","doc":"Run a task.","return_types":["ResultSet"],"parameters":[{"name":"task_name","doc":"The task to run.","types":["String[1]"],"signature_key_offset":19,"signature_key_length":10},{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":51,"signature_key_length":8},{"name":"args","doc":"Arguments to the plan. Can also include additional options: '_catch_errors', '_run_as', '_noop'.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":92,"signature_key_length":5}]},{"key":"run_task(String[1] $task_name, Boltlib::TargetSpec $targets, Optional[String] $description, Optional[Hash[String[1], Any]] $args)","doc":"Run a task, logging the provided description.","return_types":["ResultSet"],"parameters":[{"name":"task_name","doc":"The task to run.","types":["String[1]"],"signature_key_offset":19,"signature_key_length":10},{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":51,"signature_key_length":8},{"name":"description","doc":"A description to be output when calling this function.","types":["Optional[String]"],"signature_key_offset":78,"signature_key_length":12},{"name":"args","doc":"Arguments to the plan. Can also include additional options: '_catch_errors', '_run_as', '_noop'.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":123,"signature_key_length":5}]}]},{"key":"set_config","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Set configuration options on a target\n\n**NOTE:** Not available in apply block\n**NOTE:** Only compatible with inventory v2","function_version":4,"signatures":[{"key":"set_config(Target $target, Variant[String, Array[String]] $key_or_key_path, Any $value)","doc":"Set configuration options on a target\n\n**NOTE:** Not available in apply block\n**NOTE:** Only compatible with inventory v2","return_types":["Target"],"parameters":[{"name":"target","doc":"The Target object to configure. See {get_targets}.","types":["Target"],"signature_key_offset":18,"signature_key_length":7},{"name":"key_or_key_path","doc":"The configuration setting to update.","types":["Variant[String, Array[String]]"],"signature_key_offset":58,"signature_key_length":16},{"name":"value","doc":"The configuration value","types":["Any"],"signature_key_offset":80,"signature_key_length":6}]}]},{"key":"set_feature","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Sets a particular feature to present on a target.\n\nFeatures are used to determine what implementation of a task should be run.\nCurrently supported features are\n- powershell\n- shell\n- puppet-agent\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"set_feature(Target $target, String $feature, Optional[Boolean] $value)","doc":"Sets a particular feature to present on a target.\n\nFeatures are used to determine what implementation of a task should be run.\nCurrently supported features are\n- powershell\n- shell\n- puppet-agent\n\n**NOTE:** Not available in apply block","return_types":["Target"],"parameters":[{"name":"target","doc":"The Target object to add features to. See {get_targets}.","types":["Target"],"signature_key_offset":19,"signature_key_length":7},{"name":"feature","doc":"The string identifying the feature.","types":["String"],"signature_key_offset":35,"signature_key_length":8},{"name":"value","doc":"Whether the feature is supported.","types":["Optional[Boolean]"],"signature_key_offset":63,"signature_key_length":6}]}]},{"key":"set_var","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Sets a variable { key => value } for a target.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"set_var(Target $target, String $key, Data $value)","doc":"Sets a variable { key => value } for a target.\n\n**NOTE:** Not available in apply block","return_types":["Target"],"parameters":[{"name":"target","doc":"The Target object to set the variable for. See {get_targets}.","types":["Target"],"signature_key_offset":15,"signature_key_length":7},{"name":"key","doc":"The key for the variable.","types":["String"],"signature_key_offset":31,"signature_key_length":4},{"name":"value","doc":"The value of the variable.","types":["Data"],"signature_key_offset":42,"signature_key_length":6}]}]},{"key":"upload_file","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Uploads the given file or directory to the given set of targets and returns the result from each upload.\nThis function does nothing if the list of targets is empty.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"upload_file(String[1] $source, String[1] $destination, Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $options)","doc":"Upload a file or directory.","return_types":["ResultSet"],"parameters":[{"name":"source","doc":"A source path, either an absolute path or a modulename/filename selector for a\nfile or directory in $MODULEROOT/files.","types":["String[1]"],"signature_key_offset":22,"signature_key_length":7},{"name":"destination","doc":"An absolute path on the target(s).","types":["String[1]"],"signature_key_offset":41,"signature_key_length":12},{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":75,"signature_key_length":8},{"name":"options","doc":"Additional options: '_catch_errors', '_run_as'.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":116,"signature_key_length":8}]},{"key":"upload_file(String[1] $source, String[1] $destination, Boltlib::TargetSpec $targets, String $description, Optional[Hash[String[1], Any]] $options)","doc":"Upload a file or directory, logging the provided description.","return_types":["ResultSet"],"parameters":[{"name":"source","doc":"A source path, either an absolute path or a modulename/filename selector for a\nfile or directory in $MODULEROOT/files.","types":["String[1]"],"signature_key_offset":22,"signature_key_length":7},{"name":"destination","doc":"An absolute path on the target(s).","types":["String[1]"],"signature_key_offset":41,"signature_key_length":12},{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":75,"signature_key_length":8},{"name":"description","doc":"A description to be output when calling this function.","types":["String"],"signature_key_offset":92,"signature_key_length":12},{"name":"options","doc":"Additional options: '_catch_errors', '_run_as'.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":137,"signature_key_length":8}]}]},{"key":"vars","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Returns a hash of the 'vars' (variables) assigned to a target.\n\nVars can be assigned through the inventory file or `set_var` function.\nPlan authors can call this function on a target to get the variable hash\nfor that target.","function_version":4,"signatures":[{"key":"vars(Target $target)","doc":"Returns a hash of the 'vars' (variables) assigned to a target.\n\nVars can be assigned through the inventory file or `set_var` function.\nPlan authors can call this function on a target to get the variable hash\nfor that target.","return_types":["Hash[String, Data]"],"parameters":[{"name":"target","doc":"The Target object to get variables from. See {get_targets}.","types":["Target"],"signature_key_offset":12,"signature_key_length":7}]}]},{"key":"wait_until_available","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Wait until all targets accept connections.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"wait_until_available(Boltlib::TargetSpec $targets, Optional[Hash[String[1], Any]] $options)","doc":"Wait until all targets accept connections.\n\n**NOTE:** Not available in apply block","return_types":["ResultSet"],"parameters":[{"name":"targets","doc":"A pattern identifying zero or more targets. See {get_targets} for accepted patterns.","types":["Boltlib::TargetSpec"],"signature_key_offset":41,"signature_key_length":8},{"name":"options","doc":"Additional options: 'description', 'wait_time', 'retry_interval', '_catch_errors'.","types":["Optional[Hash[String[1], Any]]"],"signature_key_offset":82,"signature_key_length":8}]}]},{"key":"without_default_logging","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"Define a block where default logging is suppressed.\n\nMessages for actions within this block will be logged at `info` level instead\nof `notice`, so they will not be seen normally but # will still be present\nwhen `verbose` logging is requested.\n\n**NOTE:** Not available in apply block","function_version":4,"signatures":[{"key":"without_default_logging(Callable[0, 0] &$block)","doc":"Define a block where default logging is suppressed.\n\nMessages for actions within this block will be logged at `info` level instead\nof `notice`, so they will not be seen normally but # will still be present\nwhen `verbose` logging is requested.\n\n**NOTE:** Not available in apply block","return_types":["Undef"],"parameters":[{"name":"&block","doc":"The block where action logging is suppressed.","types":["Callable[0, 0]"],"signature_key_offset":39,"signature_key_length":7}]}]}],"datatypes":[{"key":"ApplyResult","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"","alias_of":null,"attributes":[{"key":"report","default_value":null,"doc":"","types":"Hash[String[1], Data]"},{"key":"target","default_value":null,"doc":"","types":"Target"}],"is_type_alias":false},{"key":"Result","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"","alias_of":null,"attributes":[{"key":"value","default_value":null,"doc":"","types":"Hash[String[1], Data]"},{"key":"target","default_value":null,"doc":"","types":"Target"}],"is_type_alias":false},{"key":"ResultSet","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"","alias_of":null,"attributes":[{"key":"results","default_value":null,"doc":"","types":"Array[Variant[Result, ApplyResult]]"}],"is_type_alias":false},{"key":"Target","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"","alias_of":null,"attributes":[],"is_type_alias":false},{"key":"Boltlib::PlanResult","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"","alias_of":"Variant[Boolean, Numeric, String, Undef, Error, Result, ResultSet, Target, Array[Boltlib::PlanResult], Hash[String, Boltlib::PlanResult]]","attributes":[],"is_type_alias":true},{"key":"Boltlib::TargetSpec","calling_source":null,"source":null,"line":null,"char":null,"length":null,"doc":"A TargetSpec represents any String, Target or combination thereof that can be\npassed to get_targets() to return an Array[Target]. Generally, users\nshouldn't need to worry about the distinction between TargetSpec and\nTarget/Array[Target], since the run_* functions will all handle them both\nautomatically. But for use cases that need to deal with the exact list of\nTargets that will be used, get_targets() will return that.","alias_of":"Variant[String[1], Target, Array[Boltlib::TargetSpec]]","attributes":[],"is_type_alias":true}]}